name: 🔔 Telegram Notifications

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    types: [opened, closed, reopened, synchronize, ready_for_review, converted_to_draft]
  pull_request_review:
    types: [submitted, dismissed]
  issues:
    types: [opened, closed, reopened, assigned, unassigned, labeled, unlabeled]
  issue_comment:
    types: [created]
  release:
    types: [published, unpublished, created, edited, deleted, prereleased, released]
  workflow_run:
    workflows: ["CI", "Deploy", "Tests"]
    types: [completed]
  deployment_status:
    types: [created, success, failure, pending]
  schedule:
    - cron: '0 9 * * 1' # Weekly summary every Monday at 9 AM UTC

jobs:
  notify-telegram:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]' && github.actor != 'github-actions[bot]'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Get Repository Stats
      id: repo-stats
      run: |
        # Get latest commit info
        COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" | head -c 100)
        COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
        COMMIT_DATE=$(git log -1 --pretty=format:"%cd" --date=short)
        
        # Get changed files count
        if [[ "${{ github.event_name }}" == "push" ]]; then
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} | wc -l)
          ADDITIONS=$(git diff --numstat ${{ github.event.before }}..${{ github.event.after }} | awk '{add+=$1} END {print add+0}')
          DELETIONS=$(git diff --numstat ${{ github.event.before }}..${{ github.event.after }} | awk '{del+=$2} END {print del+0}')
        else
          CHANGED_FILES=0
          ADDITIONS=0
          DELETIONS=0
        fi
        
        echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        echo "commit_date=$COMMIT_DATE" >> $GITHUB_OUTPUT
        echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "additions=$ADDITIONS" >> $GITHUB_OUTPUT
        echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT

    - name: Format Push Notification
      if: github.event_name == 'push'
      id: format-push
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        COMMIT_COUNT=${{ github.event.commits && length(github.event.commits) || 1 }}
        
        # Create commit list
        COMMIT_LIST=""
        if [[ $COMMIT_COUNT -gt 1 ]]; then
          COMMIT_LIST="📝 **Latest Commits:**"$'\n'
          for i in $(seq 0 $((COMMIT_COUNT > 3 ? 2 : COMMIT_COUNT-1))); do
            COMMIT_LIST+="  • $(echo '${{ toJson(github.event.commits) }}' | jq -r ".[$i].message" | head -c 60)..."$'\n'
          done
          if [[ $COMMIT_COUNT -gt 3 ]]; then
            COMMIT_LIST+="  • ... and $((COMMIT_COUNT-3)) more commits"$'\n'
          fi
        fi
        
        MESSAGE="🚀 **Push to \`${{ github.repository }}\`**"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="📂 **Branch:** \`$BRANCH_NAME\`"$'\n'
        MESSAGE+="👤 **Pusher:** ${{ github.actor }}"$'\n'
        MESSAGE+="📊 **Stats:** ${{ steps.repo-stats.outputs.changed_files }} files, +${{ steps.repo-stats.outputs.additions }}/-${{ steps.repo-stats.outputs.deletions }}"$'\n'
        MESSAGE+="🔢 **Commits:** $COMMIT_COUNT"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="$COMMIT_LIST"$'\n'
        MESSAGE+="🔗 [View Changes](${{ github.event.compare }})"
        
        echo "message<<EOF" >> $GITHUB_OUTPUT
        echo "$MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Format Pull Request Notification
      if: github.event_name == 'pull_request'
      id: format-pr
      run: |
        ACTION="${{ github.event.action }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        PR_AUTHOR="${{ github.event.pull_request.user.login }}"
        PR_BASE="${{ github.event.pull_request.base.ref }}"
        PR_HEAD="${{ github.event.pull_request.head.ref }}"
        PR_DRAFT="${{ github.event.pull_request.draft }}"
        PR_MERGEABLE="${{ github.event.pull_request.mergeable }}"
        
        # Set emoji based on action
        case $ACTION in
          "opened") EMOJI="🔀"; ACTION_TEXT="opened" ;;
          "closed") 
            if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
              EMOJI="✅"; ACTION_TEXT="merged"
            else
              EMOJI="❌"; ACTION_TEXT="closed"
            fi ;;
          "reopened") EMOJI="🔄"; ACTION_TEXT="reopened" ;;
          "ready_for_review") EMOJI="👀"; ACTION_TEXT="ready for review" ;;
          "converted_to_draft") EMOJI="📝"; ACTION_TEXT="converted to draft" ;;
          *) EMOJI="🔀"; ACTION_TEXT="$ACTION" ;;
        esac
        
        MESSAGE="$EMOJI **Pull Request $ACTION_TEXT**"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="📂 **Repository:** \`${{ github.repository }}\`"$'\n'
        MESSAGE+="🔢 **PR #$PR_NUMBER:** $PR_TITLE"$'\n'
        MESSAGE+="👤 **Author:** $PR_AUTHOR"$'\n'
        MESSAGE+="🌿 **Branch:** \`$PR_HEAD\` → \`$PR_BASE\`"$'\n'
        
        if [[ "$PR_DRAFT" == "true" ]]; then
          MESSAGE+="📝 **Status:** Draft"$'\n'
        fi
        
        if [[ "$ACTION" == "opened" || "$ACTION" == "synchronize" ]]; then
          MESSAGE+="📊 **Changes:** ${{ github.event.pull_request.changed_files }} files, +${{ github.event.pull_request.additions }}/-${{ github.event.pull_request.deletions }}"$'\n'
        fi
        
        MESSAGE+=""$'\n'
        MESSAGE+="🔗 [View Pull Request](${{ github.event.pull_request.html_url }})"
        
        echo "message<<EOF" >> $GITHUB_OUTPUT
        echo "$MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Format Issue Notification
      if: github.event_name == 'issues'
      id: format-issue
      run: |
        ACTION="${{ github.event.action }}"
        ISSUE_NUMBER="${{ github.event.issue.number }}"
        ISSUE_TITLE="${{ github.event.issue.title }}"
        ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
        
        # Set emoji based on action
        case $ACTION in
          "opened") EMOJI="🎯"; ACTION_TEXT="opened" ;;
          "closed") EMOJI="✅"; ACTION_TEXT="closed" ;;
          "reopened") EMOJI="🔄"; ACTION_TEXT="reopened" ;;
          "assigned") EMOJI="👤"; ACTION_TEXT="assigned" ;;
          "labeled") EMOJI="🏷️"; ACTION_TEXT="labeled" ;;
          *) EMOJI="🎯"; ACTION_TEXT="$ACTION" ;;
        esac
        
        MESSAGE="$EMOJI **Issue $ACTION_TEXT**"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="📂 **Repository:** \`${{ github.repository }}\`"$'\n'
        MESSAGE+="🔢 **Issue #$ISSUE_NUMBER:** $ISSUE_TITLE"$'\n'
        MESSAGE+="👤 **Author:** $ISSUE_AUTHOR"$'\n'
        
        if [[ "$ACTION" == "assigned" ]]; then
          MESSAGE+="👥 **Assignee:** ${{ github.event.assignee.login }}"$'\n'
        fi
        
        if [[ "$ACTION" == "labeled" ]]; then
          MESSAGE+="🏷️ **Label:** ${{ github.event.label.name }}"$'\n'
        fi
        
        MESSAGE+=""$'\n'
        MESSAGE+="🔗 [View Issue](${{ github.event.issue.html_url }})"
        
        echo "message<<EOF" >> $GITHUB_OUTPUT
        echo "$MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Format Release Notification
      if: github.event_name == 'release'
      id: format-release
      run: |
        ACTION="${{ github.event.action }}"
        RELEASE_NAME="${{ github.event.release.name }}"
        RELEASE_TAG="${{ github.event.release.tag_name }}"
        RELEASE_AUTHOR="${{ github.event.release.author.login }}"
        RELEASE_PRERELEASE="${{ github.event.release.prerelease }}"
        
        if [[ "$RELEASE_PRERELEASE" == "true" ]]; then
          EMOJI="🚀"; TYPE="Pre-release"
        else
          EMOJI="🎉"; TYPE="Release"
        fi
        
        MESSAGE="$EMOJI **$TYPE $ACTION**"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="📂 **Repository:** \`${{ github.repository }}\`"$'\n'
        MESSAGE+="🏷️ **Tag:** \`$RELEASE_TAG\`"$'\n'
        MESSAGE+="📝 **Name:** $RELEASE_NAME"$'\n'
        MESSAGE+="👤 **Author:** $RELEASE_AUTHOR"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="🔗 [View Release](${{ github.event.release.html_url }})"
        
        echo "message<<EOF" >> $GITHUB_OUTPUT
        echo "$MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Format Workflow Run Notification
      if: github.event_name == 'workflow_run'
      id: format-workflow
      run: |
        WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
        WORKFLOW_STATUS="${{ github.event.workflow_run.status }}"
        WORKFLOW_CONCLUSION="${{ github.event.workflow_run.conclusion }}"
        WORKFLOW_BRANCH="${{ github.event.workflow_run.head_branch }}"
        
        case $WORKFLOW_CONCLUSION in
          "success") EMOJI="✅"; STATUS_TEXT="succeeded" ;;
          "failure") EMOJI="❌"; STATUS_TEXT="failed" ;;
          "cancelled") EMOJI="🚫"; STATUS_TEXT="was cancelled" ;;
          "skipped") EMOJI="⏭️"; STATUS_TEXT="was skipped" ;;
          *) EMOJI="⚠️"; STATUS_TEXT="completed with status: $WORKFLOW_CONCLUSION" ;;
        esac
        
        MESSAGE="$EMOJI **Workflow $STATUS_TEXT**"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="📂 **Repository:** \`${{ github.repository }}\`"$'\n'
        MESSAGE+="⚙️ **Workflow:** $WORKFLOW_NAME"$'\n'
        MESSAGE+="🌿 **Branch:** \`$WORKFLOW_BRANCH\`"$'\n'
        MESSAGE+="⏱️ **Duration:** ${{ github.event.workflow_run.run_started_at }}"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="🔗 [View Workflow](${{ github.event.workflow_run.html_url }})"
        
        echo "message<<EOF" >> $GITHUB_OUTPUT
        echo "$MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Format Comment Notification
      if: github.event_name == 'issue_comment'
      id: format-comment
      run: |
        COMMENT_AUTHOR="${{ github.event.comment.user.login }}"
        ISSUE_NUMBER="${{ github.event.issue.number }}"
        ISSUE_TITLE="${{ github.event.issue.title }}"
        COMMENT_BODY="${{ github.event.comment.body }}"
        
        # Truncate comment if too long
        if [[ ${#COMMENT_BODY} -gt 200 ]]; then
          COMMENT_PREVIEW="${COMMENT_BODY:0:200}..."
        else
          COMMENT_PREVIEW="$COMMENT_BODY"
        fi
        
        MESSAGE="💬 **New Comment**"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="📂 **Repository:** \`${{ github.repository }}\`"$'\n'
        MESSAGE+="🔢 **Issue #$ISSUE_NUMBER:** $ISSUE_TITLE"$'\n'
        MESSAGE+="👤 **Commenter:** $COMMENT_AUTHOR"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="💭 **Comment Preview:**"$'\n'
        MESSAGE+="\`\`\`"$'\n'
        MESSAGE+="$COMMENT_PREVIEW"$'\n'
        MESSAGE+="\`\`\`"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="🔗 [View Comment](${{ github.event.comment.html_url }})"
        
        echo "message<<EOF" >> $GITHUB_OUTPUT
        echo "$MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate Weekly Summary
      if: github.event_name == 'schedule'
      id: format-summary
      run: |
        # Get repository activity for the past week
        WEEK_AGO=$(date -d '7 days ago' '+%Y-%m-%d')
        
        MESSAGE="📊 **Weekly Summary for \`${{ github.repository }}\`**"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="📅 **Period:** $WEEK_AGO to $(date '+%Y-%m-%d')"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="📈 **Activity Overview:**"$'\n'
        MESSAGE+="• 📝 Recent commits: $(git rev-list --count --since="$WEEK_AGO" HEAD)"$'\n'
        MESSAGE+="• 🌿 Active branches: $(git branch -r | wc -l)"$'\n'
        MESSAGE+="• 👥 Contributors this week: $(git shortlog -sn --since="$WEEK_AGO" | wc -l)"$'\n'
        MESSAGE+=""$'\n'
        MESSAGE+="🔗 [View Repository](https://github.com/${{ github.repository }})"
        
        echo "message<<EOF" >> $GITHUB_OUTPUT
        echo "$MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Send Telegram Notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        format: markdown
        disable_web_page_preview: true
        message: |
          ${{ steps.format-push.outputs.message }}${{ steps.format-pr.outputs.message }}${{ steps.format-issue.outputs.message }}${{ steps.format-release.outputs.message }}${{ steps.format-workflow.outputs.message }}${{ steps.format-comment.outputs.message }}${{ steps.format-summary.outputs.message }}
          
          🕐 *Sent at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*

    - name: Send Failure Notification
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        format: markdown
        message: |
          ⚠️ **Notification System Error**
          
          📂 **Repository:** `${{ github.repository }}`
          🔧 **Event:** ${{ github.event_name }}
          ❌ **Error:** Failed to process notification
          
          🔗 [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})